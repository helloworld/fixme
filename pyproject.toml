[tool.ruff]

select = [

  # (pydocstyle) Docstring-related rules. See above ignore section for selected
  # exclusions that sculpt the rules to fit Google-style docstrings. See:
  # https://github.com/charliermarsh/ruff#does-ruff-support-numpy--or-google-style-docstrings
  "D",

  # (pycodestyle) use all pycodestyle rules
  "E",

  # (pyflakes) use all pyflakes rules
  "F",

  # (isort) detect improperly sorted imports
  "I001",

  # (pylint) use all pylint rules (ruff currently implements only a subset of
  # pylint's rules)
  "PLC",
  "PLE",
  "PLW",

  # (no commented out code) keep commented out code blocks out of the codebase
  # "ERA001",

  # (ruff-specific) Enable all ruff-specific checks (i.e. not ports of
  # functionality from an existing linter).
  "RUF",

  # (disallow print statements) keep debugging statements out of the codebase
  "T",

]

ignore = [

  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",

  # incompatible rules
  "D203",  # 1 blank line required before class docstring
  "D212",  # Multi-line docstring summary should start at the first line
  "D213",  # Multi-line docstring summary should start at the second line

  "E501",
  "D401",
  "T201",
  "PLW0603"
]

[tool.ruff.isort]

# Combine multiple `from foo import bar as baz` statements with the same source
# (`foo`) into a single statement.
combine-as-imports = true

# Imports of the form `from foo import bar as baz` show one `import bar as baz`
# per line. Useful for __init__.py files that just re-export symbols.
force-wrap-aliases = true
